# Enter commands in R (or R studio, if installed)
install.packages('Seurat')
library(Seurat)
install.packages("httr")
install.packages("curl")
install.packages("curl")
install.packages("httr")
# Enter commands in R (or R studio, if installed)
install.packages('Seurat')
library(Seurat)
install.packages("SeuratObject")
remove.packages("Matrix", lib="/usr/lib/R/library")
install.packages("Matrix")
install.packages("Matrix", repos = "http://R-Forge.R-project.org")
install.packages("Matrix", version = '1.6.5')
remove.packages("Matrix", lib="/usr/lib/R/library")
remove.packages("Matrix", lib="/usr/lib/R/library")
remove.packages("Matrix")
seurat <- readRDS("~/Downloads/umap_PBMC_final.rds")
View(seurat)
View(seurat@meta.data)
rm=F
#outfile='cds_by_RNA_snn_res.0.1.Rdata'
expr_matrix=seurat@assays$RNA$counts#使用counts表达值
library(monocle)
library(Seurat)
library(SeuratData)
library(dplyr)
library(igraph)
#outfile='cds_by_RNA_snn_res.0.1.Rdata'
expr_matrix=seurat@assays$RNA$counts#使用counts表达值
sample_sheet<-seurat@meta.data#将实验信息赋值新变量
gene_annotation=data.frame(gene_short_name=rownames(seurat))#构建一个含有基因名字的数据框
rownames(gene_annotation)=rownames(seurat)#将上述数据框的行名赋值基因名字
pd <- new("AnnotatedDataFrame", data = sample_sheet)#将实验信息变量转化为monocel可以接收的对象
fd <- new("AnnotatedDataFrame", data = gene_annotation)#将基因注释变量转化为monocle可以接收的对象
cds <- newCellDataSet(expr_matrix, phenoData = pd, featureData = fd,
expressionFamily=negbinomial.size())#创建一个monocle的对象
cds #cellData对象；monocle独有
cds <- estimateSizeFactors(cds)
cds <- estimateDispersions(cds)
diff_test_res <- differentialGeneTest(cds,
fullModelFormulaStr = " ~ DNMT3A_mutated ",
reducedModelFormulaStr = " ~ sample.name",
relative_expr=TRUE, cores=16)
library(monocle)
library(Seurat)
library(SeuratData)
library(dplyr)
library(igraph)
# InstallData("ifnb")
library(ifnb.SeuratData)
seurat <- readRDS("~/Downloads/umap_PBMC_final.rds")
#outfile='cds_by_RNA_snn_res.0.1.Rdata'
expr_matrix=seurat@assays$RNA$counts#使用counts表达值
sample_sheet<-seurat@meta.data#将实验信息赋值新变量
gene_annotation=data.frame(gene_short_name=rownames(seurat))#构建一个含有基因名字的数据框
rownames(gene_annotation)=rownames(seurat)#将上述数据框的行名赋值基因名字
pd <- new("AnnotatedDataFrame", data = sample_sheet)#将实验信息变量转化为monocel可以接收的对象
fd <- new("AnnotatedDataFrame", data = gene_annotation)#将基因注释变量转化为monocle可以接收的对象
cds <- newCellDataSet(expr_matrix, phenoData = pd, featureData = fd,
expressionFamily=negbinomial.size())#创建一个monocle的对象
cds #cellData对象；monocle独有
cds <- estimateSizeFactors(cds)
cds <- estimateDispersions(cds)
diff_test_res <- differentialGeneTest(cds,
fullModelFormulaStr = " ~ DNMT3A_mutated ",
reducedModelFormulaStr = " ~ sample.name",
relative_expr=TRUE, cores=8)
ordering_genes <- row.names (subset(diff_test_res, qval < 0.01))
ordering_genes
cds <- setOrderingFilter(cds, ordering_genes)
plot_ordering_genes(cds)
saveRDS(diff_test_res,"diff_test_res.rds")
cds <- reduceDimension(cds,
max_components = 2,
num_dim = 6,
reduction_method = 'DDRTree',
#residualModelFormulaStr = "~orig.ident", #去除样本影响
verbose = T)
# 第三步: 对细胞进行排序
cds <- orderCells(cds)
save(cds,file = outfile)
saveRDS(cds,file = "cds_noorder_cell.rds")
plot_cell_trajectory(cds, color_by = "sample.name")   +
plot_cell_trajectory(cds, color_by = "celltype")
plot_cell_trajectory(cds, color_by = "sample.name")   +
plot_cell_trajectory(cds, color_by = "cell_type")  +
plot_cell_trajectory(cds, color_by = "seurat_clusters")
plot_cell_trajectory(cds, color_by = "sample.name")   +
plot_cell_trajectory(cds, color_by = "cell_types")  +
plot_cell_trajectory(cds, color_by = "seurat_clusters")
View(scRNA@meta.data)
plot_cell_trajectory(cds, color_by = "sample.name")   +
plot_cell_trajectory(cds, color_by = "DNMT3A_mutated")  +
plot_cell_trajectory(cds, color_by = "seurat_clusters")
ggsave(filename = 'celltype_vs_orig.ident_by_all.pdf',width = 10)
plot_cell_trajectory(cds, color_by = "CD14")
plot_cell_trajectory(cds, markers = "CD14")
plot_cell_trajectory(cds, markers = "CD14", use_color_gradient = TRUE))
plot_cell_trajectory(cds, markers = "CD14", use_color_gradient = TRUE)
plot_cell_trajectory(cds, markers = "FCGR3A", use_color_gradient = TRUE)
# 第三步: 对细胞进行排序
cds <- orderCells(cds)
install.packages("igraph", version = "2.0.3")
install.packages("igraph", version = "2.0.3")
library(monocle)
library(Seurat)
library(SeuratData)
library(dplyr)
library(igraph)
seurat <- readRDS("~/Downloads/umap_PBMC_final.rds")
cds <- readRDS("cds_noorder_cell.rds")
# 第三步: 对细胞进行排序
cds <- orderCells(cds)
remove.packages("igraph", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
install.packages("igraph", version = "2.0.3")
install.packages("igraph", version = "2.0.3")
detach("package:igraph", unload = TRUE)
remove.packages("igraph", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
install.packages("igraph", version = "2.0.3")
install.packages("igraph", version = "2.0.3")
devtools::install_github("cole-trapnell-lab/monocle-release@develop")
devtools::install_github("cole-trapnell-lab/monocle")
MODEL_TF <- "/home/xiaofan/Documents/Yi_APA_UI/final_model"
model <- load_model_tf(MODEL_TF)
library(dplyr)
library(keras)
tensorflow::set_random_seed(2024)
ordered_features <- readRDS(paste0(MODEL_TF,"/ordered_features.rds")
)
ordered_features
cutoff <- readRDS(paste0(MODEL_TF,"/prediction_threshold.rds"))
rowmean_sig.sets <- readRDS(paste0(MODEL_TF,"/impute_value.rds"))
model <- load_model_tf(MODEL_TF)
cutoff
rowmean_sig.sets
##Functions
preprocess_matrix <- function(input_matrix, feature_order = ordered_features, mean_values = rowmean_sig.sets) {
input_matrix %>%
as.data.frame() %>%
dplyr::filter(rownames(.) %in% feature_order) %>%
.[names(mean_values), ] %>%
replace(is.na(.), mean_values[row(.)[is.na(.)]]) %>%
t() %>%
.[, feature_order]
}
##Load APA matrix
Input_APA_matrix <- readRDS("~/Documents/Yi_APA_UI/all_tcga_samples_renamed_withNA_fitsurvival_pduimatrix.rds")
##Prediction
prediction_df <- Input_APA_matrix %>%
preprocess_matrix() #%>%
View(Input_APA_matrix)
View(prediction_df)
library(keras)
tensorflow::set_random_seed(2024)
tensorflow::set_random_seed(2024)
remotes::install_github("rstudio/tensorflow")
reticulate::install_python()
reticulate::install_python()
library(tensorflow)
install_tensorflow(envname = "r-tensorflow")
tensorflow::install_tensorflow(envname = "r-tensorflow")
install.packages("keras")
remotes::install_github("carmonalab/GeneNMF")
library(remotes)
install.packages("remotes")
remotes::install_github("carmonalab/GeneNMF")
library(qs)
library(Seurat)
library(ggplot2)
library(dplyr)
library(UCell)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager"
)
BiocManager::install("UCell")
library(UCell)
library(patchwork)
library(tidyr)
library(RColorBrewer)
library(DiffBind)
BiocManager::install("DiffBind")
library(ChIPseeker)
BiocManager::install("ChIPseeker")
BiocManager::install("TxDb.Hsapiens.UCSC.hg38.knownGene")
BiocManager::install("TxDb.Hsapiens.UCSC.hg38.knownGene")
BiocManager::install("org.Hs.eg.db")
sampleObj.list <- Seurat::SplitObject(sampleObj, split.by = "donor")
# install dataset
InstallData("ifnb")
library(SeuratData)
devtools::install_github('satijalab/seurat-data')
install.packages("devtools")
library(SeuratData)
devtools::install_github('satijalab/seurat-data')
library(SeuratData)
# install dataset
InstallData("ifnb")
# load dataset
sampleObj <- LoadData("ifnb")
View(sampleObj)
data(sampleObj)
library(GeneNMF)
data(sampleObj)
sampleObj
sampleObj.list <- Seurat::SplitObject(sampleObj, split.by = "donor")
View(sampleObj)
geneNMF.programs <- multiNMF(sampleObj.list, k=4:9)
sampleObj <- runNMF(sampleObj, k=5)
# Cluster gene programs from multiple samples and k's into meta-programs (MPs), i.e. consensus programs that are robustly identified across NMF runs. Compute MP metrics and most influencial MP genes.
geneNMF.metaprograms <- getMetaPrograms(geneNMF.programs, nMP=5)
ph <- plotMetaPrograms(geneNMF.metaprograms,
similarity.cutoff = c(0.1,1))
ph
# Cluster gene programs from multiple samples and k's into meta-programs (MPs), i.e. consensus programs that are robustly identified across NMF runs. Compute MP metrics and most influencial MP genes.
geneNMF.metaprograms <- getMetaPrograms(geneNMF.programs, nMP=4)
ph <- plotMetaPrograms(geneNMF.metaprograms,
similarity.cutoff = c(0.1,1))
ph
# Cluster gene programs from multiple samples and k's into meta-programs (MPs), i.e. consensus programs that are robustly identified across NMF runs. Compute MP metrics and most influencial MP genes.
geneNMF.metaprograms <- getMetaPrograms(geneNMF.programs, nMP=9)
ph <- plotMetaPrograms(geneNMF.metaprograms,
similarity.cutoff = c(0.1,1))
ph
geneNMF.metaprograms$metaprograms.metrics
# Cluster gene programs from multiple samples and k's into meta-programs (MPs), i.e. consensus programs that are robustly identified across NMF runs. Compute MP metrics and most influencial MP genes.
geneNMF.metaprograms <- getMetaPrograms(geneNMF.programs, nMP=9,
weight.explained = 0.8,)
geneNMF.metaprograms$metaprograms.metrics
lapply(geneNMF.metaprograms$metaprograms.genes, head)
geneNMF.metaprograms$metaprograms.genes.weights$MP6
ph <- plotMetaPrograms(geneNMF.metaprograms,
similarity.cutoff = c(0.1,1), show_rownames)
ph <- plotMetaPrograms(geneNMF.metaprograms,
similarity.cutoff = c(0.1,1), show_rownames = TRUE)
library(msigdbr)
install.packages("msigdbr")
BiocManager::install("fgsea")
# install dataset
InstallData("ifnb")
# load dataset
sampleObj <- LoadData("ifnb")
sampleObj.list <- Seurat::SplitObject(sampleObj, split.by = "stim")
# Perform NMF over a list of Seurat objects and for multiple values of k (number of NMF factors) to extract gene programs
geneNMF.programs <- multiNMF(sampleObj.list, k=4:9) # min.exp = 0.05
# Cluster gene programs from multiple samples and k's into meta-programs (MPs), i.e. consensus programs that are robustly identified across NMF runs. Compute MP metrics and most influencial MP genes.
geneNMF.metaprograms <- getMetaPrograms(geneNMF.programs, nMP=9,
weight.explained = 0.8,)
ph <- plotMetaPrograms(geneNMF.metaprograms,
similarity.cutoff = c(0.1,1), show_rownames = TRUE)
ph
# Cluster gene programs from multiple samples and k's into meta-programs (MPs), i.e. consensus programs that are robustly identified across NMF runs. Compute MP metrics and most influencial MP genes.
geneNMF.metaprograms <- getMetaPrograms(geneNMF.programs, nMP=6,
weight.explained = 0.8,)
ph <- plotMetaPrograms(geneNMF.metaprograms,
similarity.cutoff = c(0.1,1), show_rownames = TRUE)
mp.genes <- geneNMF.metaprograms$metaprograms.genes
data(sampleObj)
sampleObj
sampleObj.list <- Seurat::SplitObject(sampleObj, split.by = "stim")
sampleObj.list <- Seurat::SplitObject(sampleObj, split.by = "donor")
# Perform NMF over a list of Seurat objects and for multiple values of k (number of NMF factors) to extract gene programs
geneNMF.programs <- multiNMF(sampleObj.list, k=4:9) # min.exp = 0.05
# Cluster gene programs from multiple samples and k's into meta-programs (MPs), i.e. consensus programs that are robustly identified across NMF runs. Compute MP metrics and most influencial MP genes.
geneNMF.metaprograms <- getMetaPrograms(geneNMF.programs, nMP=6,
weight.explained = 0.8,)
ph <- plotMetaPrograms(geneNMF.metaprograms,
similarity.cutoff = c(0.1,1), show_rownames = TRUE)
ph
# Cluster gene programs from multiple samples and k's into meta-programs (MPs), i.e. consensus programs that are robustly identified across NMF runs. Compute MP metrics and most influencial MP genes.
geneNMF.metaprograms <- getMetaPrograms(geneNMF.programs, nMP=10,
weight.explained = 0.8,)
ph <- plotMetaPrograms(geneNMF.metaprograms,
similarity.cutoff = c(0.1,1), show_rownames = TRUE)
ph
geneNMF.metaprograms$metaprograms.metrics
lapply(geneNMF.metaprograms$metaprograms.genes, head)
geneNMF.metaprograms$metaprograms.genes.weights$MP6
mp.genes <- geneNMF.metaprograms$metaprograms.genes
top_p <- lapply(geneNMF.metaprograms$metaprograms.genes, function(program) {
runGSEA(program, universe=rownames(seu), category = "C5", subcategory = "GO:BP")
})
runGSEA(program, universe=rownames(sampleObj), category = "C5", subcategory = "GO:BP")
top_p <- lapply(geneNMF.metaprograms$metaprograms.genes, function(program) {
runGSEA(program, universe=rownames(sampleObj), category = "C5", subcategory = "GO:BP")
})
head(top_p$MP1)
#
mp.genes <- geneNMF.metaprograms$metaprograms.genes
mp.genes
sampleObj <- AddModuleScore_UCell(sampleObj, features = mp.genes, ncores=4, name = "")
VlnPlot(seu, features=names(mp.genes), group.by = "patient_bcc",
pt.size = 0, ncol=5)
VlnPlot(sampleObj, features=names(mp.genes), group.by = "patient_bcc",
pt.size = 0, ncol=5)
VlnPlot(sampleObj, features=names(mp.genes), group.by = "donor",
pt.size = 0, ncol=5)
library(viridis)
sampleObj <- readRDS("~/Documents/DMNT3A/pbmc_final_UMAP.rds")
View(sampleObj)
sampleObj.list <- Seurat::SplitObject(sampleObj, split.by = "sample.names")
sampleObj.list <- Seurat::SplitObject(sampleObj, split.by = "sample.name")
# Perform NMF over a list of Seurat objects and for multiple values of k (number of NMF factors) to extract gene programs
geneNMF.programs <- multiNMF(sampleObj.list, k=4:9) # min.exp = 0.05
# Cluster gene programs from multiple samples and k's into meta-programs (MPs), i.e. consensus programs that are robustly identified across NMF runs. Compute MP metrics and most influencial MP genes.
geneNMF.metaprograms <- getMetaPrograms(geneNMF.programs, nMP=12,
weight.explained = 0.8,)
ph <- plotMetaPrograms(geneNMF.metaprograms,
similarity.cutoff = c(0.1,1), show_rownames = TRUE)
ph
# Cluster gene programs from multiple samples and k's into meta-programs (MPs), i.e. consensus programs that are robustly identified across NMF runs. Compute MP metrics and most influencial MP genes.
geneNMF.metaprograms <- getMetaPrograms(geneNMF.programs, nMP=20,
weight.explained = 0.8,)
ph <- plotMetaPrograms(geneNMF.metaprograms,
similarity.cutoff = c(0.2,1), show_rownames = TRUE)
ph
#
mp.genes <- geneNMF.metaprograms$metaprograms.genes
sampleObj <- AddModuleScore_UCell(sampleObj, features = mp.genes, ncores=4, name = "")
VlnPlot(sampleObj, features=names(mp.genes), group.by = "donor",
pt.size = 0, ncol=5)
VlnPlot(sampleObj, features=names(mp.genes), group.by = "sample.name",
pt.size = 0, ncol=5)
VlnPlot(sampleObj, features=names(mp.genes), group.by = "seurat.clusters",
pt.size = 0, ncol=5)
VlnPlot(sampleObj, features=names(mp.genes), group.by = "seurat_clusters",
pt.size = 0, ncol=5)
VlnPlot(sampleObj, features=names(mp.genes), group.by = "DMNT3A_mutated",
pt.size = 0, ncol=5)
VlnPlot(sampleObj, features=names(mp.genes), group.by = "DNMT3A_mutated",
pt.size = 0, ncol=5)
DimPlot(sampleObj)
DimPlot(sampleObj, label = T)
# Load required libraries
library(shiny)
library(ggplot2)
library(DT)
# Define UI
ui <- fluidPage(
titlePanel("Basic Shiny App"),
sidebarLayout(
sidebarPanel(
sliderInput("num",
"Select Number of Points:",
min = 10, max = 1000, value = 500),
selectInput("color",
"Select Color:",
choices = c("red", "blue", "green"),
selected = "blue"),
actionButton("refresh", "Refresh Plot")
),
mainPanel(
plotOutput("scatterPlot"),
dataTableOutput("dataTable")
)
)
)
# Define Server
server <- function(input, output, session) {
# Reactive data based on input
dataset <- reactive({
input$refresh  # Trigger when refresh button is clicked
isolate({
data.frame(
x = rnorm(input$num),
y = rnorm(input$num)
)
})
})
# Generate plot
output$scatterPlot <- renderPlot({
ggplot(dataset(), aes(x = x, y = y)) +
geom_point(color = input$color) +
theme_minimal() +
labs(title = "Scatter Plot", x = "X-axis", y = "Y-axis")
})
# Generate table
output$dataTable <- renderDataTable({
datatable(dataset(), options = list(pageLength = 10))
})
}
# Run the app
shinyApp(ui = ui, server = server)
runApp('Documents/xShareSC')
pbmc <- pbmc_small
saveRDS(pbmc, file = "pbmc_small.rds")
getwd()
runApp("app.R")
setwd("~/Documents/xShareSC/")
runApp("app.R")
runApp("app.R")
runApp("app.R")
runApp("app.R")
runApp("app.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
readRDS('./data/AZ01_UMAP_no_integration_4_timepoints_cell_type.rds')
AZ01 = readRDS('./data/AZ01_UMAP_no_integration_4_timepoints_cell_type.rds')
View(AZ01)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
